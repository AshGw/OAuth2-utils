use sha2::{Digest, Sha256};
use crate::urlsafe::
{
    urlsafe_token,
    urlsafe_b64encode,
};

/// generates a random code verifier string of a specified size,
/// defaulting to 96 characters if no size is provided.
/// The `n` must be between `48` & `128`, view [#ref](https://datatracker.ietf.org/doc/html/rfc7636#section-4.1)
pub fn gen_code_verifier(n: Option<usize>) -> String {
    let size: usize = n.unwrap_or_else(|| 96);
    if size < 48 || size > 128 {
        panic!("Invalid size, the size must be between 48 and 128");
    }
    urlsafe_token(size) 
}

/// generates a code challenge by url-safe encoding the SHA256 hash of a given
/// code verifier.
/// 
/// Arguments:
/// 
/// * `code_verifier`: The `code_verifier` parameter is a string that represents a code verifier. It is
/// used in the OAuth 2.0 authorization code flow with PKCE (Proof Key for Code Exchange).
/// It is a random string that is generated by the client and used to create a code challenge
pub fn gen_code_challenge(code_verifier: &str) -> String {
    return urlsafe_b64encode(&Sha256::digest(code_verifier));
}
